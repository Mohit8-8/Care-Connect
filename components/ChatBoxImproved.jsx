import { useState, useEffect, useRef, useCallback, useMemo, memo } from 'react';
import LoadingSkeleton from './LoadingSkeleton';
// Simple language selector component
const SimpleLanguageSelector = ({ currentLanguage, onLanguageChange, disabled }) => {
  const languages = [
    { code: 'en', name: 'English' },
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä' },
    { code: 'bn', name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ' },
    { code: 'pa', name: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä' },
    { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å' }
  ];

  return (
    <select
      value={currentLanguage}
      onChange={(e) => onLanguageChange(e.target.value)}
      disabled={disabled}
      className="bg-white/20 text-white text-sm px-2 py-1 rounded border border-white/30 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
    >
      {languages.map((lang) => (
        <option key={lang.code} value={lang.code} className="bg-gray-800 text-white">
          {lang.name}
        </option>
      ))}
    </select>
  );
};
import { detectLanguage, translateText, getLanguageName } from '../lib/translationService';

// Debounce hook for input optimization
const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

// Memoized message component for better performance
const MessageBubble = memo(({ msg, index }) => {
  const isUser = msg.sender === 'user';

  return (
    <div
      key={index}
      className={`flex mb-4 animate-fade-in ${isUser ? 'justify-end' : 'justify-start'}`}
    >
      <div className={`flex items-start max-w-xs ${isUser ? 'flex-row-reverse' : ''}`}>
        <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white text-lg font-bold shadow-lg overflow-hidden ${isUser ? 'bg-gradient-to-r from-blue-400 to-blue-500' : 'bg-gradient-to-r from-green-400 to-green-500'}`} style={{ fontFamily: 'Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols', lineHeight: '1', textAlign: 'center', display: 'flex', alignItems: 'center', justifyContent: 'center', flexShrink: 0 }}>
          {isUser ? 'üë§' : '‚öïÔ∏è'}
        </div>
        <div
          className={`mx-3 p-4 rounded-2xl max-w-xs break-words shadow-lg ${
            isUser
              ? 'bg-gradient-to-r from-blue-400 to-blue-500 text-white rounded-br-md'
              : 'bg-white/90 shadow-lg backdrop-blur-sm text-gray-800 rounded-bl-md border border-white/30'
          }`}
        >
          {msg.text}
        </div>
      </div>
    </div>
  );
});

MessageBubble.displayName = 'MessageBubble';

const ChatBox = () => {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [sessionId] = useState(() => Date.now().toString()); // Generate unique session ID
  const [currentLanguage, setCurrentLanguage] = useState('en'); // Default to English
  const [detectedLanguage, setDetectedLanguage] = useState('en');
  const messagesEndRef = useRef(null);

  // Debounce input to prevent excessive API calls
  const debouncedInput = useDebounce(input, 300);

  // Load conversation from session storage on component mount
  useEffect(() => {
    const savedConversation = sessionStorage.getItem(`chat_${sessionId}`);
    if (savedConversation) {
      try {
        setMessages(JSON.parse(savedConversation));
      } catch (error) {
        console.error('Error loading saved conversation:', error);
      }
    }
  }, [sessionId]);

  // Save conversation to session storage whenever messages change
  useEffect(() => {
    if (messages.length > 0) {
      sessionStorage.setItem(`chat_${sessionId}`, JSON.stringify(messages));
    }
  }, [messages, sessionId]);

  // Optimized scroll function
  const scrollToBottom = useCallback(() => {
    // Use requestAnimationFrame for smooth scrolling
    requestAnimationFrame(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    });
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);

  // Memoize conversation history to prevent unnecessary recalculations
  const conversationHistory = useMemo(() => {
    return messages.slice(-20).map(msg => ({
      role: msg.sender === 'user' ? 'user' : 'assistant',
      content: msg.text
    }));
  }, [messages]);

  // Detect language when input changes
  useEffect(() => {
    if (debouncedInput.trim()) {
      detectLanguage(debouncedInput).then(lang => {
        setDetectedLanguage(lang);
        // Auto-switch to detected language if it's different and supported
        if (lang !== 'en' && lang !== currentLanguage) {
          setCurrentLanguage(lang);
        }
      });
    }
  }, [debouncedInput, currentLanguage]);

  // Memoize send message function
  const sendMessage = useCallback(async () => {
    if (!debouncedInput.trim() || isLoading) return;

    const userMessage = {
      sender: 'user',
      text: debouncedInput,
      timestamp: new Date().toISOString(),
      language: currentLanguage
    };
    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInput('');
    setIsLoading(true);

    try {
      // Translate user message to English for AI processing
      const englishMessage = currentLanguage === 'en'
        ? debouncedInput
        : await translateText(debouncedInput, 'en', currentLanguage);

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: englishMessage,
          conversationHistory,
          sessionId,
          userLanguage: currentLanguage
        }),
      });

      const data = await response.json();

      if (data.response) {
        // Translate AI response back to user's language
        const translatedResponse = currentLanguage === 'en'
          ? data.response
          : await translateText(data.response, currentLanguage, 'en');

        const aiMessage = {
          sender: 'ai',
          text: translatedResponse,
          timestamp: new Date().toISOString(),
          language: currentLanguage
        };
        setMessages((prev) => [...prev, aiMessage]);
      } else {
        const errorMessage = {
          sender: 'ai',
          text: `Error: ${data.error || 'No response from AI'}`,
          timestamp: new Date().toISOString(),
          language: currentLanguage
        };
        setMessages((prev) => [...prev, errorMessage]);
      }
    } catch (error) {
      console.error('Chat error:', error);
      let errorText = 'Error: Failed to fetch AI response';
      if (error.message) {
        errorText += ` - ${error.message}`;
      }
      const errorMessage = {
        sender: 'ai',
        text: errorText,
        timestamp: new Date().toISOString(),
        language: currentLanguage
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  }, [debouncedInput, isLoading, messages, conversationHistory, sessionId, currentLanguage]);

  // Memoize key handler
  const handleKeyDown = useCallback((e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      if (debouncedInput.trim() && !isLoading) {
        sendMessage();
      }
    }
  }, [debouncedInput, isLoading, sendMessage]);

  // Language-specific content
  const getLanguageContent = (lang) => {
    const content = {
      'en': {
        welcomeTitle: 'Welcome to Dr. MedBot!',
        welcomeSubtitle: 'Your AI medical assistant for general health information',
        disclaimer: '‚ö†Ô∏è Important: This AI provides general health information only. Always consult healthcare professionals for medical concerns.',
        placeholder: 'Ask about symptoms, general health advice, or medical information...',
        quickCategories: 'Quick categories:',
        categories: ['Symptoms', 'Prevention', 'General Health'],
        questions: ['Diarrhea medicine?', 'Cold symptoms?', 'Headache relief?', 'Fever treatment?', 'Health tips?']
      },
      'hi': {
        welcomeTitle: '‡§°‡•â. ‡§Æ‡•á‡§°‡§¨‡•â‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!',
        welcomeSubtitle: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡§æ AI ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü',
        disclaimer: '‚ö†Ô∏è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§Ø‡§π AI ‡§ï‡•á‡§µ‡§≤ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§',
        placeholder: '‡§≤‡§ï‡•ç‡§∑‡§£, ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π, ‡§Ø‡§æ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç...',
        quickCategories: '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡§æ‡§Ç:',
        categories: ['‡§≤‡§ï‡•ç‡§∑‡§£', '‡§®‡§ø‡§µ‡§æ‡§∞‡§£', '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø'],
        questions: ['‡§¶‡§∏‡•ç‡§§ ‡§ï‡•Ä ‡§¶‡§µ‡§æ?', '‡§∏‡§∞‡•ç‡§¶‡•Ä ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£?', '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§∞‡§æ‡§π‡§§?', '‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞?', '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç?']
      },
      'bn': {
        welcomeTitle: '‡¶°‡¶æ‡¶É ‡¶Æ‡ßá‡¶°‡¶¨‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!',
        welcomeSubtitle: '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ AI ‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ',
        disclaimer: '‚ö†Ô∏è ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£: ‡¶è‡¶á AI ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶â‡¶¶‡ßç‡¶¨‡ßá‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        placeholder: '‡¶≤‡¶ï‡ßç‡¶∑‡¶£, ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂, ‡¶¨‡¶æ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...',
        quickCategories: '‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó:',
        categories: ['‡¶≤‡¶ï‡ßç‡¶∑‡¶£', '‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß', '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø'],
        questions: ['‡¶°‡¶æ‡¶Ø‡¶º‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ì‡¶∑‡ßÅ‡¶ß?', '‡¶∏‡¶∞‡ßç‡¶¶‡¶ø‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£?', '‡¶Æ‡¶æ‡¶•‡¶æ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ ‡¶â‡¶™‡¶∂‡¶Æ?', '‡¶ú‡ßç‡¶¨‡¶∞ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ?', '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶ü‡¶ø‡¶™‡¶∏?']
      },
      'pa': {
        welcomeTitle: '‡®°‡®æ. ‡®Æ‡©à‡®°‡®¨‡©å‡®ü ‡®µ‡®ø‡©±‡®ö ‡®ú‡©Ä ‡®Ü‡®á‡®Ü‡®Ç ‡®®‡©Ç‡©∞!',
        welcomeSubtitle: '‡®Ü‡®Æ ‡®∏‡®ø‡®π‡®§ ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®≤‡®à ‡®§‡©Å‡®π‡®æ‡®°‡®æ AI ‡®Æ‡©à‡®°‡©Ä‡®ï‡®≤ ‡®∏‡®π‡®æ‡®á‡®ï',
        disclaimer: '‚ö†Ô∏è ‡®Æ‡®π‡©±‡®§‡®µ‡®™‡©Ç‡®∞‡®®: ‡®á‡®π AI ‡®∏‡®ø‡®∞‡®´‡®º ‡®Ü‡®Æ ‡®∏‡®ø‡®π‡®§ ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®™‡©ç‡®∞‡®¶‡®æ‡®® ‡®ï‡®∞‡®¶‡®æ ‡®π‡©à‡•§ ‡®Æ‡©à‡®°‡©Ä‡®ï‡®≤ ‡®ö‡®ø‡©∞‡®§‡®æ‡®µ‡®æ‡®Ç ‡®≤‡®à ‡®π‡®Æ‡©á‡®∏‡®º‡®æ ‡®∏‡®ø‡®π‡®§ ‡®™‡©á‡®∏‡®º‡©á‡®µ‡®∞‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®∏‡®≤‡®æ‡®π ‡®ï‡®∞‡©ã‡•§',
        placeholder: '‡®≤‡©±‡®õ‡®£, ‡®Ü‡®Æ ‡®∏‡®ø‡®π‡®§ ‡®∏‡®≤‡®æ‡®π, ‡®ú‡®æ‡®Ç ‡®Æ‡©à‡®°‡©Ä‡®ï‡®≤ ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®¨‡®æ‡®∞‡©á ‡®™‡©Å‡©±‡®õ‡©ã...',
        quickCategories: '‡®§‡©á‡®ú‡®º ‡®∏‡®º‡©ç‡®∞‡©á‡®£‡©Ä‡®Ü‡®Ç:',
        categories: ['‡®≤‡©±‡®õ‡®£', '‡®∞‡©ã‡®ï‡®•‡®æ‡®Æ', '‡®Ü‡®Æ ‡®∏‡®ø‡®π‡®§'],
        questions: ['‡®¶‡®∏‡®§ ‡®¶‡©Ä ‡®¶‡®µ‡®æ‡®à?', '‡®∏‡®∞‡®¶‡©Ä ‡®¶‡©á ‡®≤‡©±‡®õ‡®£?', '‡®∏‡®ø‡®∞‡®¶‡®∞‡®¶ ‡®∞‡®æ‡®π‡®§?', '‡®¨‡©Å‡®ñ‡®æ‡®∞ ‡®á‡®≤‡®æ‡®ú?', '‡®∏‡®ø‡®π‡®§ ‡®∏‡©Å‡®ù‡®æ‡®Ö?']
      },
      'te': {
        welcomeTitle: '‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç ‡∞Æ‡±Ü‡∞°‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç‚Äå‡∞ï‡±Å ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç!',
        welcomeSubtitle: '‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Æ‡±Ä AI ‡∞Æ‡±Ü‡∞°‡∞ø‡∞ï‡∞≤‡±ç ‡∞Ö‡∞∏‡∞ø‡∞∏‡±ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç',
        disclaimer: '‚ö†Ô∏è ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Æ‡±à‡∞®‡∞¶‡∞ø: ‡∞à AI ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞§ ‡∞Ü‡∞Ç‡∞¶‡±ã‡∞≥‡∞®‡∞≤‡∞ï‡±Å ‡∞é‡∞≤‡±ç‡∞≤‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞®‡∞ø‡∞™‡±Å‡∞£‡±Å‡∞≤‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.',
        placeholder: '‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å, ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞≤‡∞π‡∞æ‡∞≤‡±Å, ‡∞≤‡±á‡∞¶‡∞æ ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø...',
        quickCategories: '‡∞§‡±ç‡∞µ‡∞∞‡∞ø‡∞§ ‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞≤‡±Å:',
        categories: ['‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å', '‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞£', '‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Ç'],
        questions: ['‡∞µ‡∞ø‡∞∞‡±á‡∞ö‡∞®‡∞æ‡∞≤ ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡±Å?', '‡∞ú‡∞≤‡±Å‡∞¨‡±Å ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å?', '‡∞§‡∞≤‡∞®‡±ä‡∞™‡±ç‡∞™‡∞ø ‡∞â‡∞™‡∞∂‡∞Æ‡∞®‡∞Ç?', '‡∞ú‡±ç‡∞µ‡∞∞ ‡∞ö‡∞ø‡∞ï‡∞ø‡∞§‡±ç‡∞∏?', '‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞ö‡∞ø‡∞ü‡±ç‡∞ï‡∞æ‡∞≤‡±Å?']
      }
    };
    return content[lang] || content['en'];
  };

  const langContent = getLanguageContent(currentLanguage);

  return (
    <div className="flex flex-col h-full max-h-[80vh] bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl shadow-2xl">
      {/* Language Selector */}
      <div className="flex justify-between items-center p-4 border-b border-white/20">
        <div className="flex items-center space-x-2">
          <span className="text-white text-sm font-medium">Language:</span>
          <SimpleLanguageSelector
            currentLanguage={currentLanguage}
            onLanguageChange={setCurrentLanguage}
            disabled={isLoading}
          />
        </div>
        {detectedLanguage !== currentLanguage && (
          <div className="text-white/80 text-xs">
            Detected: {getLanguageName(detectedLanguage)}
          </div>
        )}
      </div>

      <div className="flex-1 bg-white/10 shadow-lg backdrop-blur-sm p-4 rounded-lg overflow-y-auto mb-4 border border-white/20 shadow-inner">
        {messages.length === 0 && (
          <div className="text-center text-white mt-8">
            <div className="mb-6">
              <span className="text-6xl" style={{ fontFamily: 'Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols', lineHeight: '1', textAlign: 'center', display: 'inline-block' }}>‚öïÔ∏è</span>
            </div>
            <p className="text-xl font-semibold text-white mb-2">{langContent.welcomeTitle}</p>
            <p className="text-sm mb-4 text-white/80">{langContent.welcomeSubtitle}</p>

            {/* Medical Disclaimer */}
            <div className="bg-yellow-50/90 shadow-lg backdrop-blur-sm border-l-4 border-yellow-400 p-4 rounded-r-lg mb-6">
              <p className="text-yellow-800 text-sm">
                <strong>‚ö†Ô∏è Important:</strong> {langContent.disclaimer}
              </p>
            </div>

            {/* Quick Questions */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
              {langContent.questions.map((question, index) => (
                <button
                  key={index}
                  onClick={() => setInput(question)}
                  className="bg-white/20 hover:bg-white/30 text-white text-sm p-3 rounded-lg transition-colors duration-200 shadow-lg backdrop-blur-sm"
                >
                  {question}
                </button>
              ))}
            </div>
          </div>
        )}
        {/* Memoized message list */}
        {messages.map((msg, index) => (
          <MessageBubble key={`${msg.timestamp}-${index}`} msg={msg} index={index} />
        ))}
        {isLoading && <LoadingSkeleton />}
        <div ref={messagesEndRef} />
      </div>
      <div className="flex bg-white/10 shadow-lg backdrop-blur-sm rounded-lg shadow-md border border-white/20">
        <input
          type="text"
          placeholder={langContent.placeholder}
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          disabled={isLoading}
          className="flex-1 p-4 border-0 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-white placeholder-white/60 disabled:opacity-50 bg-transparent"
        />
        <button
          onClick={sendMessage}
          disabled={isLoading || !debouncedInput.trim()}
          className="px-6 py-4 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white rounded-r-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 font-semibold disabled:opacity-50 disabled:cursor-not-allowed shadow-lg backdrop-blur-sm border-2 border-white/40 hover:border-white/60 flex items-center justify-center"
        >
          <svg
            className="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
            />
          </svg>
        </button>
      </div>

      {/* Medical Categories */}
      <div className="mt-3 flex flex-wrap gap-2">
        <span className="text-xs text-white/80">{langContent.quickCategories}</span>
        {langContent.categories.map((category) => (
          <button
            key={category}
            onClick={() => setInput(`Tell me about ${category.toLowerCase()}`)}
            className="text-xs bg-white/20 hover:bg-white/30 text-white px-2 py-1 rounded-full transition-colors duration-200 shadow-lg backdrop-blur-sm"
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  );
};

export default ChatBox;
