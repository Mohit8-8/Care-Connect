// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  clerkUserId       String    @unique // Clerk's user ID
  email             String    @unique
  name              String?
  imageUrl          String?
  role              UserRole  @default(UNASSIGNED) // UNASSIGNED, PATIENT, DOCTOR, ADMIN
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Patient-specific fields
  credits           Int       @default(2) // Accumulated credit balance
  
  // Doctor-specific fields
  specialty         String?
  experience        Int?      // Years of experience
  credentialUrl     String?   // Document URL
  description       String?   @db.Text
  verificationStatus VerificationStatus?  @default(PENDING)

  // Medicine Store-specific fields
  storeName         String?
  storeAddress      String?   @db.Text
  storePhone        String?
  storeLicense      String?   // Store license number
  storeDescription  String?   @db.Text
  storeVerificationStatus VerificationStatus?  @default(PENDING)
  
  // Relations
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments  Appointment[] @relation("DoctorAppointments")
  availabilities      Availability[]
  transactions        CreditTransaction[]
  payouts             Payout[]

  // Medicine Store Relations
  storeInventory      MedicineStoreInventory[]
  storeOrders         MedicineOrder[] @relation("StoreOrders")
  patientOrders       MedicineOrder[] @relation("PatientOrders")

  // Report Relations
  doctorReports       Report[] @relation("ReportDoctor")
  patientReports      Report[] @relation("ReportPatient")
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
  MEDICINE_STORE
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Availability {
  id        String   @id @default(uuid())
  doctorId  String
  doctor    User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  status    SlotStatus @default(AVAILABLE)
  
  @@index([doctorId, startTime])
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

model Appointment {
  id                String   @id @default(uuid())
  patientId         String
  patient           User     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId          String
  doctor            User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime         DateTime // Start time of appointment
  endTime           DateTime // End time of appointment
  status            AppointmentStatus @default(SCHEDULED)
  notes             String?  @db.Text
  patientDescription String? @db.Text

  // Video session fields
  videoSessionId    String?  // Vonage Video API Session ID
  videoSessionToken String?  // Optional: Can store tokens if needed

  // Relations
  reports           Report[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model CreditTransaction {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount            Int      // Positive for additions, negative for usage
  type              TransactionType
  packageId         String?  // Reference to which package was purchased
  createdAt         DateTime @default(now())
}

enum TransactionType {
  CREDIT_PURCHASE     // Credits purchased through Clerk Billing
  APPOINTMENT_DEDUCTION // Credit used for appointment
  ADMIN_ADJUSTMENT      // Manual adjustment by admin
}

model Payout {
  id              String        @id @default(uuid())
  doctorId        String
  doctor          User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  amount          Float         // Total payout amount in USD
  credits         Int           // Number of credits being paid out
  platformFee     Float         // Platform fee deducted (2 USD per credit)
  netAmount       Float         // Amount doctor receives (8 USD per credit)
  paypalEmail     String        // Doctor's PayPal email for payout
  status          PayoutStatus  @default(PROCESSING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  processedAt     DateTime?     // When admin marked it as processed
  processedBy     String?       // Admin who processed it

  @@index([status, createdAt])
  @@index([doctorId, status])
}

enum PayoutStatus {
  PROCESSING
  PROCESSED
}

model Medicine {
  id          String   @id @default(uuid())
  name        String
  genericName String?
  category    String
  description String?  @db.Text
  manufacturer String?
  dosage      String?
  sideEffects String?  @db.Text
  precautions String?  @db.Text
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory   MedicineStoreInventory[]
  orders      MedicineOrder[]

  @@index([category])
  @@index([name])
}

model MedicineStoreInventory {
  id            String  @id @default(uuid())
  storeId       String
  store         User    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  medicineId    String
  medicine      Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  price         Float   // Price per unit
  stock         Int     // Available quantity
  minStockLevel Int?    // Minimum stock level for alerts
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([storeId, medicineId])
  @@index([storeId])
  @@index([medicineId])
}

model MedicineOrder {
  id          String   @id @default(uuid())
  patientId   String
  patient     User     @relation("PatientOrders", fields: [patientId], references: [id])
  storeId     String
  store       User     @relation("StoreOrders", fields: [storeId], references: [id])
  medicineId  String
  medicine    Medicine @relation(fields: [medicineId], references: [id])
  quantity    Int
  unitPrice   Float
  totalAmount Float
  status      MedicineOrderStatus @default(PENDING)
  orderDate   DateTime @default(now())
  deliveryDate DateTime?
  notes       String?  @db.Text

  @@index([patientId, status])
  @@index([storeId, status])
  @@index([status, orderDate])
}

enum MedicineOrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  DELIVERED
  CANCELLED
}

model Report {
  id          String   @id @default(uuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  doctorId    String
  doctor      User     @relation("ReportDoctor", fields: [doctorId], references: [id])
  patientId   String
  patient     User     @relation("ReportPatient", fields: [patientId], references: [id])
  title       String
  description String?  @db.Text
  fileUrl     String   // Cloudinary URL for the report file
  fileType    String   // PDF, DOC, DOCX, etc.
  fileSize    Int      // File size in bytes
  status      ReportStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([appointmentId])
  @@index([doctorId])
  @@index([patientId])
  @@index([status])
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}
